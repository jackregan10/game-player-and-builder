# ERROR AND LOG MESSAGES
temporaryFileDeleteFail=Could not delete temp file: {0}
temporaryFileDelete=Temporary file deleted after upload.
firebaseAlreadyExists=Firebase already initialized.
relationshipAlreadyExists=Relationship already exists.
invalidTypReference=Invalid TypeReference construction
cannotFetchSerializedField=Cannot get the value to SerializedField: {0}
unsupportedSerializableField=Unsupported @SerializableField type: {0} in {1}#{2}
invalidJson=Invalid JSON node for Animation
failedToFetchFollowers=Failed to get followers for user: {0}
unfollow=Follower {0} unfollows {1}
noFollow=Follower {0} does not follow {1}
userUnfollowSelf=Users cannot follow/unfollow themselves.
failedToFollow=%s failed to follow %s: %s
failedToUnfollow=%s failed to unfollow %s: %s
errorFetchingFollowers=Error fetching followers: %s
errorGettingFollowings=Error getting followings: %s
errorCheckingIfFollows=Error checking if %s follows %s
noUserInDatabase=Error, no user in the database
autoLoginStoreFailure=Failed to store autologin:
autoLoginError=Error with handling autologin: {}
successfulLogout=Logout successful
successfulLogin=User: {0} has successfully logged in
successfulLoginLog=Successfully logged in
failureLoginLog=Failed to log in. Please ensure username and password are correct.
rememberMe=Remember Me
usernameAlreadyExists=Username already exists
incorrectPassword=Password is incorrect.
oneOrMoreFieldsMissing=One or more fields are missing.
errorSavingUserPhoto=Error saving user photo
errorUploadingProfilePhoto=Error uploading new profile photo
couldNotFetchPlayerList=Could not fetch list of all players.
levelRetrieved=Retrieved {0} levels for user {1}
successfulDeletion=Level deleted successfully
levelDoesNotExist=Level does not exist
levelStorageFailure=Failed to store user level.
levelUpdateFailure=Failed to update user level.
levelSaveError=Error saving level: {}
levelDeleteFailureS3=Failed to delete user level in S3
levelDeleteFailure=Failed to delete user level
levelRetrievalFailure=Failed to retrieve user levels
levelAlreadyExists=Level already exists
scoreStorageError=Error storing score
scoreDeleteError=Error deleting score
highScoreDoesNotExist=High score for username %s and game %s does not exist.
fetchHighScoresError=Error fetching high scores
failedToFetch=Failed to fetch document: {0}
missingResolutionBlock=Missing or invalid resolution block.
missingName=Missing Name.
errorCreatingGameScene=Scene with name {0} not found and therefore will not be added to Game.
gameObjectWithoutTransform=GameObject {0} did not contain Transform Component
noDataFound=No Data Found
noNameFound=No Name Found
noMatchingComponent=Did not find component name. Throwing exception.
errorInstantiatingComponent=Error instantiating component: {0}
errorExtendingComponent=Class does not extend GameComponent: {0}
errorStartGameLoop=Cannot start the game loop: {0}
nullGameNode=Could not write file {0}. Is a file corrupted?
gameFileCreatedInfo=Created game file {0}.
errorMappingJson=Could not write file {0}. Error mapping to JSON.
noParseFileNotFound=Could not parse file {0}. File was not found.
noParseFileCorrupted=Could not parse file {0}. Is a file corrupted?
errorParsingPrefab=Error parsing prefab {0} : {1}
noJsonFoundInDirectory=No JSON files found in prefab directory: {0}
prefabDirectoryError=Prefab directory does not exist: {0}
deleteRememberMePreferenceInfo=Remember Me Preferences deleted
databaseOutputError=Error with FileOutputStream
noObjectFound=No object found with name: {0}
failedToRetrieveKey=Failed to retrieve or set value from key: '{0}'
mismatchKeyValue=Value for key '{0}' is not of type: {1}
missingKeyException=Field '{0}' not found on object '{1}'
fieldAccessException=Cannot get value from {0}
noMatchingGameObject=No GameObject found with ID: '{0}'
invalidKeyPath=Invalid key path format: '{0}'. Expected format: 'objectId.fieldName'
noValueInScriptable=No value found in ScriptableDataStore for key: '{0}'
expectedNumericValue=Expected numeric value but got {0}
divisionByZeroError=Division by zero in DIV op
nullFollowObject=Follow Object is null
cameraMustHaveTransformInfo=Camera must have a Transform component
animationNotFound=Animation {0} not found.
missingParentScene=GameObject does not have a parent scene
objectCopyError="Cannot copy Object"
cannotRemoveTransformInfo=Cannot remove Transform component
addComponentFailure=Could not add component {0}
componentAlreadyExistsInfo=Component already exists
noSuchComponentParent={0} has no parent
failedObjectCopy=Cannot copy Object
resetSceneInfo=Scene {0} reset successfully
resetSceneError=No original JSON found for scene {0}
prefabSceneAlreadyExists=Prefab Scene already exist: {0}
sceneAlreadyExists=Scene with ID {0} already exists.
databaseError=Database error.
noGameScene=No Game Scene has not been loaded yet.
keyIncompatibleType=Key does not match the expected type.
keyNotFound=Key does not exist for {0}. Returning key.
languageFileNotFound=Language file not found for {0}. Switching to default.
errorHashingPassword=Error hashing password
errorHashingPasswordWithMessage=Error hashing password: {}
userAlreadyExistsWithMessage=User already exists in database: {}
errorParsingGame=Failed to parse game JSON file: {0}
errorSavingGame=Error saving game to JSON: {0}
noSuchGameToSave=No game loaded to save.
followerInformationError=Could not determine whether {} follows {}
fileSaveError=Failed to save file: {0}
levelPlayingError=Error fetching user levels: {0}
levelDeleteError=Unable to delete level: {0}
buttonError=Error creating buttons: {0}
invalidProfileUpdate=Information updated to profile is invalid.
noCamera=No camera found
duplicateGameObject=GameObject with name {0} already exists
playerExistsError=Player {0} already exists
createPlayerMessage=Created player {0}
playerNotExistError=Player {0} does not exist in collection {1}
deletePlayerSuccess=Successfully deleted player {0}
existingScoreMessage=Existing score {0} for {1} in {2} is higher or equal to new score {3}
saveUpdateScoreMessage=Saved or updated new high score {0} for {1} in {2}
scoreNotExistError=Score {0} does not exist at collection {1}
databaseAddError=Failed to add the document: {0}
databaseDeleteError=Failed to delete the document: {0}
databaseUpdateError=Failed to update the document: {0}
errorAddNewViewScene=Failed to instantiate view scene: {0}.
noSuchGameScene=No game scene {0} loaded. Skipping step.
noSuchViewScene=No view scene {0} loaded. Skipping step.
noTransformWithCamera=Camera transform not found
noSuchRenderMethod=No such component render method exists: {0}
failToRenderImage=Failed to render image: {0}
invalidRenderContext=Provided rendering context was of invalid type.
notDeclaredRequiredComponents=Component Type {0} isn't declared in the required Component list.
noRenderContext=No rendering context has been set; use setRenderContext() to set.
noSuchPlayer=There is no current user.
errorDeterminingFollower=Error determining whether {} follows {}
errorFindingGenericType= Could not determine generic type for {0}
errorIllegalDeserializedInput=The input {0} is not a valid for deserializing.
errorSerializing=Error in serialization process: {0}
noSuchUser=Could not find logged-in user
errorDeserializing=Error in deserialization process: {0}
noFollowerList=Could not find follow list for user {}
errorCreateSerializer=Could not determine generic type for Serializer in {0}
errorCreateDeserializedUI=Could not determine generic type for DeserializedFieldUI in {0}
errorCreateRenderer=Could not determine generic type for ComponentRenderer in {0}
noGameFileSelected=No game file was selected. {0}
stylesheetNotFound=Stylesheet file not found for '{}'. Switching to default.
couldNotLoadFallback=Could not load fallback stylesheet: {}
errorLoadingPreviewImage=Error loading preview image from: {}
prefabHasNoSpriteRenderer=Prefab '{}' has no SpriteRenderer component, using placeholder image.
prefabHasBadImagePath=Prefab '{}' has empty or null imagePath in SpriteRenderer, using placeholder image.
missingUsernameOrPassword=Missing username or password
autologinSetupError=Error setting up autologin:
couldNotFetchFollowerFollowing=Could not fetch followers/following from database.
error=Error
anErrorOccurred=An error occurred.
signUpIOError=Could not sign user in.
illegalArgumentException=Illegal argument exception: {}

# GENERIC TEXT
addText=+
minusText=-
ellipsesText=...

# DESERIALIZED FIELD INPUT
enterDoublePrompt=Enter a double value
selectPrompt=Select...
paramPrompt=param...
newBehavior=New Behavior

# VIEW
windowWidth=1280
windowHeight=720

# MAIN VIEW MANAGER
defaultScene=MainMenuScene

## SCENES
returnButton=Return
pauseButton=Pause
resumeButton=Resume

# BUILDER
prefabTitle=Prefabs
sceneTitle=Scenes
viewTitle=View
objectTitle=Objects
componentTitle=Components
saveLocalButton=Save To Local
saveProfileButton=Save To Profile
mainMenuButton=Main Menu
previewButton=Preview Level
levelName=Level Name
levelDescription=Level Description
nameField=Enter Name:
descriptionField=Enter Description:
saveTitle=Save Level
headerText=Enter Level Name and Description
updateButton=Update Level

addComponentButton=Add Component
addGameObject=Add GameObject
prefabNote= (prefab)
addScene=Add Scene

levelSavedAndUploaded=Level saved and uploaded successfully.
failedToSaveOrUploadLevel=Failed to save or upload level: %s
saveGameFile=Save Game File
confirmExit=Confirm Exit
unsavedChangesMayBeLost=Unsaved changes may be lost!
areYouSureQuit=Are you sure you want to quit?
confirmedExit=User confirmed exit.
canceledExit=User canceled exit.
notLoggedIn=User not logged in.

# HOVER TOOLTIP LABELS
nameLabel=Name:
typeLabel=Type:
descriptionLabel=Description:

# COMPONENT DESCRIPTIONS
AnimationControllerDescription=Manages the animation of a GameObject, including the list of animation names,\n the current animation, and the time to switch between animations.
BehaviorControllerDescription=Manages the behaviors of a game object. It is\n responsible for executing the behaviors and managing the constraints and actions associated with\n each behavior.
CameraDescription=Used to represent a camera in the game. It is responsible for\n determining which objects are in view.
ColliderDescription=A physics component responsible for detecting collisions and executing behaviors based on object\n type. Primary responsibilities are calculating which other objects the parent is currently\n colliding with (collidedColliders) based off of a pre-set group of objects (collidableTags),\n resolving collisions with non-permeable objects, and providing helper functions pertaining to\n specific collisions (isTouchingFromAbove, horizontallyAligned, etc.)
FollowerDescription=The FollowBehavior class is used to make a game object follow another game object with a\n specified offset.
InputHandlerDescription=Handles raw keyboard input with custom key codes.
PhysicsHandlerDescription=Handles the physics of a game object, including mass, velocity, and acceleration.
SpriteRendererDescription=A visual component that represents an image to be rendered at a specific position. This component\n stores the image path and its intended render coordinates (x, y).
TextRendererDescription=A component that renders text on screen as part of a GameObject. This component uses JavaFX\n styling and snapshotting to draw styled text to the canvas. Example uses: - Game over messages -\n HUD elements like scores or instructions - Button labels or static screen prompts
TransformDescription=A component that defines the spatial and visual properties of a GameObject, including position,\n scale, rotation, and image path.\n\n This is typically the foundational component for rendering and positioning game entities within\n the scene.

# ACTION DESCRIPTIONS
ChangeGameSceneActionDescription=Changes the current GameScene within the Game. - If parameter == -2, go to last level - If\n parameter == -1, go to next level - If parameter >= 0, go to level at that index
ChangeViewSceneActionDescription=ChangeViewSceneAction is a class that extends BehaviorAction and is used to change the scene.
DeleteObjectActionDescription=The SpawnObjectAction class is a behavior action that spawns a new object in the scene.\n It takes the name of the object to spawn as a parameter.
LaunchAnimationActionDescription=The LaunchAnimationAction class is a behavior action that launches an animation on the parent\n object. It takes the name of the animation to launch as a parameter.
MoveSceneToStoreActionDescription=Action to move a scene to the store.
MoveStoreToSceneActionDescription=Action to move a store to the scene.
PushActionDescription=The PushAction class is a behavior action that pushes a game object in the direction of the\n velocity of the parent object. It is used to move objects in the game world.
PushActionXDescription=The PushActionX class is a behavior action that pushes a game object in the X direction based on\n the velocity of the parent object. It is used to move objects in the game world along the X axis.
PushActionYDescription=The PushActionY class is a behavior action that pushes a game object in the Y direction based on\n the velocity of the parent object. It is used to move objects in the game world along the Y axis.
RotationSetActionDescription=The RotationSetAction class is an action that sets the rotation of a Transform component.
ScaleXSetActionDescription=ScaleXSetAction is a class that extends SetComponentValueAction and is used to set the X scale of\n the object.
ScaleYSetActionDescription=ScaleYSetAction is a class that extends SetComponentValueAction and is used to set the Y scale of\n the object.
SetCameraFocusActionDescription=The SetCameraFocusAction class is a behavior action that sets the camera focus to a specific object.\n It takes the name of the object to focus on as a parameter.
SetComponentValueActionDescription=SetComponentValueAction is an abstract class that extends BehaviorAction and is used to set a\n value of a component.
SetPositionXActionDescription=SetPositionXAction is a class that extends SetComponentValueAction and is used to set the X\n position of the object.
SetPositionYActionDescription=SetPositionYAction is a class that extends SetComponentValueAction and is used to set the Y\n position of the object.
SetTextActionDescription=Generic SetTextAction that accepts any input type and converts it to a string.
SetTextFromDataStoreActionDescription=An action that sets the text of a TextRenderer component based on a value\nretrieved from the ScriptableDataStore.\n\nThis action expects its input parameter to be a string key path (for example, "player.score")\nused to fetch a live value from the data store during execution. The TextRenderer will keep its\ninitial text as a prefix, and the fetched value will be appended.\n\nThe /save tag ensures that the value is saved to long-term storage in the ScriptableDataStore.\nIf future scenes also use the /save tag, they will fetch and add in the saved value.\nAn alias can also be specified (for example, /save,score).\n\nThe /op: tag applies an operation (add, sub, mul, div) to the fetched value, followed by a reference or literal.\n\nExample parameter:\n"player.score/save,score/op:add,other.value"
SetTextFromSavedStoreActionDescription=An action that sets the text of a TextRenderer component based on a manually saved value in the ScriptableDataStore's long-term data map.\nUnlike SetTextFromDataStoreAction, this action does not fetch live scene fields or apply operations; it reads the value exactly as stored using set(...) into the store.\n\nExample parameter:\n"player.score"


SpawnObjectActionDescription=The SpawnObjectAction class is a behavior action that spawns a new prefabricated object in the scene.\n It takes the name of the object inside the prefab scene to spawn as a parameter.
SpawnObjectFromCameraActionDescription=The SpawnObjectFromCameraAction class is a behavior action that spawns a new prefabricated object in the scene.\
  \n It takes the name of the object inside the prefab scene to spawn as a parameter.\
  \n It spawns the object at the camera's position plus the object's transform.
SpawnObjectGeneralActionDescription=General Spawn object superclass. Allows customizing from where the object is spawned.
SwapActionDescription=SwapAction is a class that extends BehaviorAction and is used to swap the position of the parent\
  \n object with the object in the store.
VelocityXSetActionDescription=VelocityXSetAction is a class that extends SetComponentValueAction and is used to set the X\
  \n velocity of the object.
VelocityYSetActionDescription=VelocityYSetAction is a class that extends SetComponentValueAction and is used to set the Y\
  \n velocity of the object.

# CONSTRAINT DESCRIPTIONS
CollidesWithConstraintDescription=This class defines a constraint that checks if a GameObject's Collider component collides with\
  \n another GameObject that has a Collider component with a specified tag. It extends the\
  \n BehaviorConstraint class, using a String to specify the target tag.
HasCurrentAnimationConstraintDescription=hasCurrentAnimation is a class that extends BehaviorConstraint and is used to check if the\
  \n current animation of an entity matches a given parameter.
KeyHoldConstraintDescription=KeyHoldConstraint is a class that extends BehaviorConstraint and is used to check if a key is\
  \n being held down.
KeyNotPressConstraintDescription=KeyNotPressConstraint is a class that extends BehaviorConstraint and is used to check if a key is\
  \n not ever pressed.
KeyPressConstraintDescription=KeyPressConstraint is a class that extends BehaviorConstraint and is used to check if a key is\
  \n ever pressed.
KeyReleaseConstraintDescription=KeyReleaseConstraint is a class that extends BehaviorConstraint and is used to check if a key is\
  \n ever released.
MouseClickConstraintDescription=Constraint that is satisfied if the object's InputHandler registers a mouse click this frame.
MovementConstraintDescription=Constraint for an action which takes a name of an object as a parameter, and checks\
  \n whether that object has moved
PassConstraintDescription=Checks whether an object has passed another object
PassXConstraintDescription=PassXConstraint is a class that extends PassConstraint and is used to check if the parent object\
  \n has passed another object in the x direction.
PassYConstraintDescription=PassYConstraint is a class that extends PassConstraint and is used to check if the parent object\
  \n has passed another object in the y direction.
TouchingFromAboveConstraintDescription=This class defines a constraint that checks if a GameObject's Collider component is touching\
  \n another GameObject's Collider component from above, within a specified tolerance. It extends the\
  \n BehaviorConstraint class, using a String to specify the target tag.
TouchingFromDirectionConstraintDescription=Generalized abstract constraint to check if a Collider is touching another collider\
  \n from a specific direction, defined by subclasses.
TouchingFromSideConstraintDescription=This class defines a constraint that checks if a GameObject's Collider component is touching\
  \n another GameObject's Collider component from either side, within a specified tolerance. It extends the\
  \n BehaviorConstraint class, using a String to specify the target tag.
TouchingFromTopBottomConstraintDescription=This class defines a constraint that checks if a GameObject's Collider component is touching\
  \n another GameObject's Collider component from either Top or Bottom, within a specified tolerance. It extends the\
  \n BehaviorConstraint class, using a String to specify the target tag.

# MAIN MENU
mainMenuTitle=PLATFORMERS
playButton=PLAY GAME
buildButton=AUTHORING ENVIRONMENT
socialHubButton=SOCIAL HUB
gameSelector=DINO,GEOMETRY DASH
gameSelectorInitialValue=SELECT A GAME
languageSelectorInitialValue=SELECT A LANGUAGE
languageSelector=ENGLISH,SPANISH,GERMAN
themeSelector=DARK,LIGHT,FREAKY,CLASSY,FAIL
themeSelectorInitialValue=SELECT A THEME
logOutButton=LOG OUT
builderFileSelection=Select a JSON file!
jsonFileDirectory=data/GameJsons

# GAME MENU SCENE
dinoGameButtonImageFile=oogasalad/dinosaur/DinoRun1.png
geoDashButtonImageFile=oogasalad/geodash/player.png
doodleJumpButtonImageFile=oogasalad/doodle/sprite.png

#SOCIAL HUB SPLASH SCREEN
socialWelcomeMessage=WELCOME TO PLATFORMERS
socialEmailPrompt=Username
socialPasswordPrompt=Password
socialLoginButton=Login
logInText=Log In
socialSignUpButton=Sign Up
showPassText=Show
hidePassText=Hide
socialBioField=Bio
paused=Paused
gameLabel=Game: %s
authorLabel=Author: %s

#SOCIAL HUB SIGN UP SCENE
uploadFileTitle=Select a File
signUpLabel=SIGN UP
signUpPrompt=Fill in the following fields to create an account
signUpFirstNameField=First Name
signUpLastNameField=Last Name
uploadFileButton=Upload New Photo

# SOCIAL HUB WELCOME SCENE
avatarFetchFail=Could not fetch player avatar url.
socialHubTitle=SOCIAL HUB
socialHubSubtitle=Play. Build. Compete.
profileButton=Profile
leaderboardButton=Leaderboard
leaderboardTitle=Leaderboards
scoreTitleDisplay=SCORE: {0}
searchForUserTitle=Search for User
loadScoresFail=Failed to load scores.
loadLeaderboard=Click to load leaderboard?
profileSearchButton=Profile Search

# LEADERBOARD
InfiniteDino=Dino
InfiniteGeoDash=Geometry Dash
InfiniteDoodle=Doodle Jump
couldNotLoadLeaderboard=Could not load leaderboard
noScoresToDisplay=No Scores to Display
enterGameName=Enter Game Name...
search=Search
levelLeaderboardButton=Leaderboard
customTabLabel=Custom
loadingPlaceholder=Loading...
failedToLoadScores=Failed to Load Scores

# SOCIAL HUB PROFILE SCENE
profileUsername=Username: {0}
downloadSelectionInitialValue=Save Level As
profileDateJoined=Date Joined: {0}
editProfileButton=Edit
noBioText=No Bio
username=Username: {0}
levelTitle= Created Levels:
levelPlayButton=Play
levelEditButton=Edit
levelDownloadButton=Download
levelDeleteButton=Delete

# FOLLOW SCENE
followTitle=Follow

# SOCIAL HUB EDIT PROFILE SCENE
profilePhoto=Profile Photo:
profilePhotoUploadButton=Upload New Photo
selectedPhotoLabelEmpty=No file selected
selectedPhotoLabel=Selected: {0}
selectedPhotoSpacing=10
profileFullName=Profile Name:
profileBio=Bio:
profileBioLineCount=3
profileUsernameLabel=Username:
profileEditSaveButton=Save Changes
followButton=Follow
unfollowButton=Unfollow
profileUpdated=Profile updated

# SOCIAL HUB FOLLOW SCENE
followerLabel=Followers: {0}
followingLabel=Following: {0}
followerButton=Followers
followingButton=Following

# SOCIAL HUB SEARCH USER PAGE
profileSearch=Profile Search

# GUI
framesPerSecond=60

# TESTING
testNumber=123.45
testList=item1,item2,item3
testKey=This is a test message.
testKeyArgument=This is a test message with argument: {0}
testNumberFail=This is not a number type

# WIN SCREEN
score=score